name: Reusable deployment workflow

on:
  workflow_call:
#    inputs:
#      environment_name:
#        type: string
#        description: environment to deploy to
#        required: true
#      environment_tag:
#        type: string
#        description: environment tag fo publishing
#        required: true

jobs:
  prepare-environment:
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    # Job outputs containing expressions are evaluated on the runner at the end of each job
    outputs:
      environment_name: ${{ steps.branch_check.outputs.environment_name }}
      environment_tag: ${{ steps.branch_check.outputs.environment_tag }}

    steps:
      # https://www.codewrecks.com/post/github/choose-environment-from-branch/
      # https://stackoverflow.com/questions/63117454/how-to-set-workflow-env-variables-depending-on-branch
      # https://hungvu.tech/advanced-github-actions-conditional-workflow
      - name: Set environment for branch
        id: branch_check
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
              echo "environment_tag=" >> "$GITHUB_OUTPUT"
              echo "environment_name=production" >> "$GITHUB_OUTPUT"
          elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
              echo "environment_tag=-dev" >> "$GITHUB_OUTPUT"
              echo "environment_name=staging" >> "$GITHUB_OUTPUT"
          elif [[ $GITHUB_REF == 'refs/heads/preview' ]]; then
              echo "environment_tag=-preview" >> "$GITHUB_OUTPUT"
              echo "environment_name=preview" >> "$GITHUB_OUTPUT"
          elif [[ $GITHUB_REF == 'refs/heads/beta' ]]; then
              echo "environment_tag=-beta" >> "$GITHUB_OUTPUT"
              echo "environment_name=preview" >> "$GITHUB_OUTPUT"
          else
              echo "environment_tag=-dev" >> "$GITHUB_OUTPUT"
              echo "environment_name=develop" >> "$GITHUB_OUTPUT"
          fi

      - name: Echo Environment
        run: |
          echo "I'm using environment: ${{ steps.branch_check.outputs.environment_name }}"
          echo "I'm using environment-tag: ${{ steps.branch_check.outputs.environment_tag }}"

  deploy:
    name: Deploy to ${{ needs.prepare-environment.outputs.environment_name }}
    runs-on: ubuntu-latest
    needs: prepare-environment

    # https://docs.github.com/en/actions/learn-github-actions/variables#defining-environment-variables-for-a-single-workflow
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
    # https://docs.github.com/en/actions/learn-github-actions/variables
    # Any environment variables set in an env context defined at the workflow level in the caller workflow are not propagated to the called workflow
    env:
      REGISTRY: ghcr.io
      CATALOG_SVC_PATH: ${{ github.workspace }}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj
      CUSTOMERS_SVC_PATH: ${{ github.workspace }}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj
      IDENTITY_SVC_PATH: ${{ github.workspace }}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj

      # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    environment:
      name: ${{ needs.prepare-environment.outputs.environment_name }}
      # url: ${{ steps.deploy-to-heroku.outputs.webapp-url }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dotnet-nuget
        path: ~/.nuget/packages

    - name: create output dir
      run: mkdir  "output"

      # https://github.com/actions/download-artifact#download-all-artifacts
      # download artifacts without name will download all artifacts
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: dir
      run: ls -R "${{ github.workspace }}/artifacts/build-test-artifacts"

      # https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
    - name: unzip artifacts
      run: |
        unzip "artifacts/build-test-artifacts/test-results.zip" -d "output"

    - name: Ls Output Files
      if: success()
      run: ls -R ${{ github.workspace }}/output

    # merging all coverage in a single coverage file and generating html files for downloading as artifacts
    - name: Publish coverage report to coveralls.io
      if: success()
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: "output/test-results/lcov.info"

    # https://thecodinganalyst.github.io/knowledgebase/Basic-guide-to-Semantic-Release/
    # https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b
    # https://gist.github.com/ujlbu4/15a305f2e53cb487c39c9484e660903a
    # https://github.com/semantic-release/semantic-release/issues/753#issuecomment-706971174
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
    - name: Semantic Release Publish
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
      run: npx  -p conventional-changelog-conventionalcommits -p @semantic-release/git -p @semantic-release/changelog -p @semantic-release/exec  semantic-release

    - name: Semantic Release Outputs
      run: |
        echo ${{ steps.semantic.outputs.semantic_nextRelease_version }}
        echo ${{ steps.semantic.outputs.semantic_nextRelease_channel }}
        echo ${{ steps.semantic.outputs.semantic_nextRelease_gitTag }}
        echo ${{ steps.semantic.outputs.semantic_lastRelease_version }}
        echo ${{ steps.semantic.outputs.semantic_lastRelease_channel }}
        echo ${{ steps.semantic.outputs.semantic_lastRelease_gitTag }}

    - name: Restore NuGet packages
      continue-on-error: false
      run: dotnet restore

    # https://garywoodfine.com/how-to-use-github-actions-to-build-deploy-github-nuget-packages/
    # https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-7.0#the-dockerfile
    # or calling dotnet publish on solution - we marked `publishable` and `packable` projects in their .csproj
    - name: dotnet publish
      continue-on-error: false
      id: publish-services
      if: success()
      run: |
        dotnet publish -c Release --no-restore  ${{ env.CATALOG_SVC_PATH }} -o ${{ github.workspace }}/output/publish-services/Catalogs /p:Version=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }}
        dotnet publish -c Release --no-restore  ${{ env.CUSTOMERS_SVC_PATH }}  -o ${{ github.workspace }}/output/publish-services/Customers /p:Version=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }}
        dotnet publish -c Release --no-restore  ${{ env.IDENTITY_SVC_PATH }} -o ${{ github.workspace }}/output/publish-services/Identity /p:Version=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic_nextRelease_version }}

      # https://unix.stackexchange.com/questions/57013/zip-all-files-in-directory
      # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
      # https://stackoverflow.com/questions/68470162/how-to-archive-files-in-artifact-for-github-workflow-actions-in-order-to-fix-thi
      # note: we should zip inner (publish-services) folder and for doing this we use  `cd output` first then zip
      # `publish-services/*` folder, otherwise with zip `output/publish-services` it zip output folder and inner `publish-services`folder together
    - name: Zip publish-services Artifacts
      run: |
        cd output
        zip -r publish-services.zip publish-services/*

      # https://github.com/actions/runner/issues/946#issuecomment-900193569
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
    - name: Ls Output Files
      if: success()
      run: ls -R
      working-directory: ${{ github.workspace }}/output

    - name: Upload Publish Services Artifacts For Deployment Jobs
      uses: actions/upload-artifact@v3
      if: (steps.publish-services.outcome == 'success')
      with:
        name: publish-services
        retention-days: 1
        path: |
          output/publish-services.zip

      # https://docs.docker.com/engine/reference/commandline/build/
      # https://dev.to/willvelida/pushing-container-images-to-github-container-registry-with-github-actions-1m6b
      # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
    -  name: docker build
       run: |
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/catalogs-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }}  -f "${{ github.workspace }}/src/Services/Catalogs/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/customers-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }} -f "${{ github.workspace }}/src/Services/Customers/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/identity-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }}  -f "${{ github.workspace }}/src/Services/Identity/Dockerfile"

    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v1
      if: success()
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: docker publish
      if: success()
      run: |
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/catalogs-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }}
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/customers-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }}
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/identity-service:${{ steps.semantic.outputs.semantic_nextRelease_version }}${{ needs.prepare-environment.outputs.environment_tag }}
