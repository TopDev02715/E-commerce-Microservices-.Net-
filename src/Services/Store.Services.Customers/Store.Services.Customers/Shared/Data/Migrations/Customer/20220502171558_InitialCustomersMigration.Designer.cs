// <auto-generated />
using System;
using Store.Services.Customers.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Store.Services.Customers.Shared.Data.Migrations.Customer
{
    [DbContext(typeof(CustomersDbContext))]
    [Migration("20220502171558_InitialCustomersMigration")]
    partial class InitialCustomersMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Store.Services.Customers.Customers.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrentVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("current_version");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<string>("Nationality")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("nationality");

                    b.Property<long>("OriginalVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_id");

                    b.HasIndex("IdentityId")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_identity_id");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_phone_number");

                    b.ToTable("customers", "customer");
                });

            modelBuilder.Entity("Store.Services.Customers.RestockSubscriptions.Models.Write.RestockSubscription", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("CurrentVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("current_version");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<long>("OriginalVersion")
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("processed");

                    b.Property<DateTime?>("ProcessedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_time");

                    b.HasKey("Id")
                        .HasName("pk_restock_subscriptions");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_restock_subscriptions_customer_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_restock_subscriptions_id");

                    b.ToTable("restock_subscriptions", "customer");
                });

            modelBuilder.Entity("Store.Services.Customers.Customers.Models.Customer", b =>
                {
                    b.OwnsOne("Store.Services.Customers.Customers.Models.CustomerName", "Name", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("name_last_name");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.OwnsOne("BuildingBlocks.Core.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(25)
                                .HasColumnType("character varying(25)")
                                .HasColumnName("address_city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_country");

                            b1.Property<string>("Detail")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("address_detail");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customers", "customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customers_customers_id");
                        });

                    b.Navigation("Address");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Services.Customers.RestockSubscriptions.Models.Write.RestockSubscription", b =>
                {
                    b.HasOne("Store.Services.Customers.Customers.Models.Customer", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_restock_subscriptions_customers_customer_id");

                    b.OwnsOne("Store.Services.Customers.RestockSubscriptions.ValueObjects.ProductInformation", "ProductInformation", b1 =>
                        {
                            b1.Property<long>("RestockSubscriptionId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint")
                                .HasColumnName("product_information_id");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("product_information_name");

                            b1.HasKey("RestockSubscriptionId");

                            b1.ToTable("restock_subscriptions", "customer");

                            b1.WithOwner()
                                .HasForeignKey("RestockSubscriptionId")
                                .HasConstraintName("fk_restock_subscriptions_restock_subscriptions_id");
                        });

                    b.Navigation("ProductInformation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
