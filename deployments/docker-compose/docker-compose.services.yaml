version: '3'
services:
  gateway:
    build:
      context: ../../
      dockerfile: src/ApiGateway/ECommerce.ApiGateway/Dockerfile
    container_name: ecommerce-gateway
    # restart: unless-stopped
    ports:
      - ${GATEWAY_PORT}:80
    networks:
      - ecommerce

  catalogs:
    image: catalogs:${TAG}
    build:
      args:
        Version: "1"
      context: ../../
      dockerfile: src/Services/ECommerce.Services.Catalogs/Dockerfile
    container_name: ecommerce-catalogs
    # restart: unless-stopped
    ports:
      - ${CATALOGS_SVC_PORT}:80
    depends_on:
      - postgres
      - rabbitmq
      - mongo
    links:
      - postgres
      - rabbitmq
      - mongo
    networks:
      - ecommerce

  identity:
    image: identity:${TAG}
    build:
      args:
        Version: "1"
      context: ../../
      dockerfile: src/Services/ECommerce.Services.Identity/Dockerfile
    container_name: ecommerce-identity
    # restart: unless-stopped
    ports:
      - ${IDENTITY_SVC_PORT}:80
    depends_on:
      - postgres
      - rabbitmq
      - mongo
    links:
      - postgres
      - rabbitmq
      - mongo
    networks:
      - ecommerce

  customers:
    image: customers:${TAG}
    build:
      args:
        Version: "1"
      context: ../../
      dockerfile: src/Services/ECommerce.Services.Customers/Dockerfile
    container_name: ecommerce-customers
    # restart: unless-stopped
    ports:
      - ${CUSTOMERS_SVC_PORT}:80
    depends_on:
      - postgres
      - rabbitmq
      - mongo
    links:
      - postgres
      - rabbitmq
      - mongo
    networks:
      - ecommerce
